# 関数 f(y, x) は、原点 (0,0) から (x,y) までの黒いマスの面積を計算する
def f(y, x):
    # パターンごとの黒マスの累積値をテーブルで定義
    a = [
        [0, 0, 0, 0, 0],  # y の余りが 0 の場合
        [0, 2, 3, 3, 4],  # y の余りが 1 の場合
        [0, 3, 6, 7, 8],  # y の商と余りを組み合わせた場合
    ]

    # y//2 と x//4 の商に基づいて完全ブロックの面積を計算
    sub1 = (y // 2) * (x // 4) * a[2][4]

    # y の半ブロックに対して x の余り部分を足す
    sub2 = (y // 2) * a[2][x % 4]

    # x のブロックに対して y の余り部分を足す
    sub3 = (x // 4) * a[y % 2][4]

    # y の余りと x の余りの小さい部分を足す
    sub4 = a[y % 2][x % 4]

    # 合計して黒マスの面積を返す
    return sub1 + sub2 + sub3 + sub4


# 入力の座標は負の値もあり得るため、十分大きなオフセットを加えて正にする
M = 10**9
A, B, C, D = map(lambda x: int(x) + M, input().split())

# inclusion-exclusion の原理を使って長方形内の黒マスの面積を計算
# f(D, C) - f(D, A) - f(B, C) + f(B, A)
print(f(D, C) - f(D, A) - f(B, C) + f(B, A))
